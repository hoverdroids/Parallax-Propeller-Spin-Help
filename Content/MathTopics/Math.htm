<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="116" MadCap:lastWidth="895" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Math Resources" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" class="" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head><title>Math Examples</title>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/PropellerHelpPSQNA.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="MathResc.htm">Math Resources</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Math Examples</span>
        </div>
        <h1>Math Examples</h1>
        <p class="PlainText">Multiplication, division, and square root can be computed by using add, subtract, and shift instructions.&#160;For other math-related examples, see the <a href="MLog.htm" target="" title="" alt="" class="MCXref_0">Log Table</a>, <a href="MAntilog.htm" target="" title="" alt="" class="MCXref_0">Anti-Log Table</a>, and <a href="MSine.htm" target="" title="" alt="" class="MCXref_0">Sine Table</a>.</p>
        <h2>Multiplication</h2>
        <p class="PlainText"> Here is an unsigned multiplier routine that multiplies two 16-bit values to yield a 32-bit product:</p>
        <div class="propcode"><pre xml:space="preserve" class="spin_dat1">DAT

'' Multiply x[15..0] by y[15..0] (y[31..16] must be 0)
' on exit, product in y[31..0]
'
multiply        shl     x,#16            'get multiplicand into x[31..16]
                mov     t,#16            'ready for 16 multiplier bits
                shr     y,#1      wc     'get initial multiplier bit into c
:loop  if_c     add     y,x       wc     'if c set, add multiplicand to product
                rcr     y,#1      wc     'put next multiplier in c, shift prod.
                djnz    t,#:loop         'loop until done
multiply_ret    ret                      'return with product in y[31..0]
</pre>
        </div>
        <p>&#160;</p>
        <p class="PlainText">The above routine's execution time could be cut by ~1/3 if the loop was unrolled, repeating the <span class="keyword_in_text">ADD</span> / <span class="keyword_in_text">RCR </span>sequence and getting rid of the <span class="keyword_in_text">DJNZ</span> instruction.</p>
        <h2>Division</h2>
        <p class="PlainText">Division is like multiplication, but backwards. It is potentially more complex, though, because a comparison test must be performed before a subtraction can take place. To remedy this, there don’t is a special <span class="keyword_in_text">CMPSUB</span> D, S instructions which tests to see if a subtraction can be performed without causing an underflow. If no underflow would occur, the subtraction takes place and the C output is 1. If an underflow would occur, D is left alone and the C output is 0.</p>
        <p class="PlainText">Here is an unsigned divider routine that divides a 32-bit value by a 16-bit value to yield a 16-bit quotient and a 16-bit remainder:</p>
        <div class="propcode"><pre xml:space="preserve" class="spin_dat1">DAT

' Divide x[31..0] by y[15..0] (y[16] must be 0)
' on exit, quotient is in x[15..0] and remainder is in x[31..16]
'
divide          shl     y,#15            'get divisor into y[30..15]
                mov     t,#16            'ready for 16 quotient bits
:loop           cmpsub  x,y       wc     'y =&lt; x? Subtract it, quotient bit in c
                rcl     x,#1             'rotate c into quotient, shift dividend
                djnz    t,#:loop         'loop until done
divide_ret      ret                      'quotient in x[15..0],
                                         'remainder in x[31..16]
</pre>
        </div>
        <p>&#160;</p>
        <p class="PlainText">Like the multiplier routine, this divider routine could be recoded with a sequence of 16 <span class="code_in_text">CMPSUB</span> + <span class="code_in_text">RCL</span> instruction pairs to get rid of the <span class="keyword_in_text">DJNZ</span> and cut execution time by ~1/3. By making such changes, speed can often be gained at the expense of code size.</p>
        <h2>Square Root</h2>
        <p class="PlainText">Here is a square-root routine that uses the <span class="keyword_in_text">CMPSUB</span> instruction:</p>
        <div class="propcode"><pre xml:space="preserve" class="spin_dat1">DAT
'
' Compute square-root of y[31..0] into x[15..0]
'
root            mov     a,#0             'reset accumulator
                mov     x,#0             'reset root
                mov     t,#16            'ready for 16 root bits
:loop           shl     y,#1    wc       'rotate top two bits of y to accumulator
                rcl     a,#1
                shl     y,#1    wc
                rcl     a,#1
                shl     x,#2             'determine next bit of root
                or      x,#1
                cmpsub  a,x     wc
                shr     x,#2
                rcl     x,#1
                djnz    t,#:loop         'loop until done
root_ret        ret                      'square root in x[15..0]
</pre>
        </div>
        <p>&#160;</p>
        <p class="PlainText">Many complex math functions can be realized by additions, subtractions, and shifts. Though specific examples were given here, these types of algorithms may be coded in many different ways to best suit the application.</p>
        <div class="Col2">
            <div class="MasterFoot">
                <p><a href="../HomeTopics/HomePage.htm">Go to Welcome page</a>
                </p>
                <p>&#160;</p>
                <p>&#160;</p>
            </div>
        </div>
        <div class="Col2">
            <div class="MasterFoot">
                <p style="text-align: right;"><span MadCap:conditions="PropellerHelpConditionTags.PropellerHelp" class="ContactInfoProjectName">Propeller Help</span> <![CDATA[ ]]><span MadCap:conditions="PropellerHelpConditionTags.PropellerHelp" class="ContactInfoVersion#">Version 1.3</span></p>
                <p style="text-align: right;">Copyright ©&#160;<span class="ContactInfoCompanyName">Parallax Inc.</span>, dba <span class="ContactInfodbaName">Parallax Semiconductor</span></p>
                <p style="text-align: right;">
                </p>
                <p style="text-align: right;"><span class="SystemShortDate">7/18/2012</span>
                </p>
                <p style="text-align: right;"><span class="MCPopup"><a href="javascript:void(0);" MadCap:src="../HomeTopics/TermsOfUse.htm" onclick="FMCPopup( event, this ); return false;" class="MCXref_0" alt="" title="" xrefformat="{paratext}" xrefhref="../../HomeTopics/TermsOfUse.htm">Terms of Use</a></span>
                </p>
            </div>
        </div>
        <script type="text/javascript">/* <![CDATA[ */

			var _gaq = _gaq || [];
			_gaq.push(['_setAccount', 'UA-285614-1']);
			_gaq.push(['_trackPageview']);

			(function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
			})();

		/* ]]> */</script>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>