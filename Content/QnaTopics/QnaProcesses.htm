<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="116" MadCap:lastWidth="895" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Questions and Answers" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head><title>Processes</title>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/PropellerHelpPSQNA.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="QnaLocal.htm">Questions and Answers</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Processes</span>
        </div>
        <h1>Processes</h1>
        <div class="MCDropDown">
            <div class="MCDropDownHead_0"><a class="MCDropDownHotSpot_0" href="javascript:void(0);" id="MCDropDownHotSpot_78907024_0" onclick="FMCDropDown( this ); return false;"><img style="border: none;margin-right: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" class="MCDropDownIcon" />What is a process?</a>
            </div>
            <div class="MCDropDownBody" id="MCDropDownBody_78907024_0" style="display: none;">
                <p class="PlainText">A process is an instance of a program being executed by a processor and is responsible for the sustained performance of activity described by that program. This includes the code, its static and dynamic data, its execution states, and the states of the processor itself.</p>
                <p class="PlainText">The term <i>process</i> is often used interchangeably with the term <i>task</i>; however, for our purposes a process is a long-term phenomena whereas a task is much more short-lived.</p>
            </div>
        </div>
        <p>&#160;</p>
        <div class="MCDropDown">
            <div class="MCDropDownHead_0"><a class="MCDropDownHotSpot_0" href="javascript:void(0);" id="MCDropDownHotSpot_78907024_1" onclick="FMCDropDown( this ); return false;"><img style="border: none;margin-right: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" class="MCDropDownIcon" />What is a task?</a>
            </div>
            <div class="MCDropDownBody" id="MCDropDownBody_78907024_1" style="display: none;">
                <p class="PlainText">A task is a brief activity from a small part of a process. It is the result of breaking a process into smaller pieces with intent to provide only momentary execution of each and to interleave them with other tasks from other processes.</p>
            </div>
        </div>
        <p>&#160;</p>
        <div class="MCDropDown">
            <div class="MCDropDownHead_0"><a class="MCDropDownHotSpot_0" href="javascript:void(0);" id="MCDropDownHotSpot_78907024_2" onclick="FMCDropDown( this ); return false;"><img style="border: none;margin-right: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" class="MCDropDownIcon" />What is multi-processing?</a>
            </div>
            <div class="MCDropDownBody" id="MCDropDownBody_78907024_2" style="display: none;">
                <p class="PlainText">Multi-processing is the act of executing multiple programs in parallel. This involves using multiple processors (one for each program being executed) to achieve true concurrency.</p>
                <p class="PlainText">A multi-processing system can execute multiple processes concurrently without any latencies between them, except when they share a mutually-exclusive resource.</p>
            </div>
        </div>
        <p>&#160;</p>
        <div class="MCDropDown">
            <div class="MCDropDownHead_0"><a class="MCDropDownHotSpot_0" href="javascript:void(0);" id="MCDropDownHotSpot_78907024_3" onclick="FMCDropDown( this ); return false;"><img style="border: none;margin-right: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" class="MCDropDownIcon" />What is multi-tasking?</a>
            </div>
            <div class="MCDropDownBody" id="MCDropDownBody_78907024_3" style="display: none;">
                <p class="PlainText">Multi-tasking is the act of executing small pieces of multiple programs in series. This involves using a single processor and rapidly switching between tasks to give the illusion of process concurrency.</p>
                <p class="PlainText">A multi-tasking system can execute multiple processes, but only a piece of each at any given time, often with unpredictable latencies that worsen as more processes are involved.</p>
            </div>
        </div>
        <p>&#160;</p>
        <div class="MCDropDown">
            <div class="MCDropDownHead_0"><a class="MCDropDownHotSpot_0" href="javascript:void(0);" id="MCDropDownHotSpot_78907024_4" onclick="FMCDropDown( this ); return false;"><img style="border: none;margin-right: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" class="MCDropDownIcon" />Can the Propeller multi-process?</a>
            </div>
            <div class="MCDropDownBody" id="MCDropDownBody_78907024_4" style="display: none;">
                <p class="PlainText">Yes, it's what the Propeller was built to do well.</p>
                <p class="PlainText">In typical applications, cogs perform most operations within their own Cog RAM, and with the System Counter and I/O pins.  Since access to those resources is unimpeded by any cog, the Propeller often achieves extreme concurrent processing throughput.</p>
            </div>
        </div>
        <p>&#160;</p>
        <div class="MCDropDown">
            <div class="MCDropDownHead_0"><a class="MCDropDownHotSpot_0" href="javascript:void(0);" id="MCDropDownHotSpot_78907024_5" onclick="FMCDropDown( this ); return false;"><img style="border: none;margin-right: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" class="MCDropDownIcon" />Can the Propeller multi-task?</a>
            </div>
            <div class="MCDropDownBody" id="MCDropDownBody_78907024_5" style="display: none;">
                <p class="PlainText">Though it wasn't built with this in mind, a simple task-switching mechanism can be realized in Propeller Assembly through the use of the <span class="keyword_in_text">JMPRET</span> instruction.</p>
            </div>
        </div>
        <p>&#160;</p>
        <div class="MCDropDown">
            <div class="MCDropDownHead_0"><a class="MCDropDownHotSpot_0" href="javascript:void(0);" id="MCDropDownHotSpot_78907024_6" onclick="FMCDropDown( this ); return false;"><img style="border: none;margin-right: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" class="MCDropDownIcon" />How many processes can the Propeller handle at once?</a>
            </div>
            <div class="MCDropDownBody" id="MCDropDownBody_78907024_6" style="display: none;">
                <p class="PlainText">The Propeller can have up to eight cogs executing processes at any time. This does not limit your application to eight objects, eight Spin methods, or eight assembly routines– just eight cogs executing code at the same time. Some processes may need to perform continuously, like the main program loop, or code that is parsing a constant stream of data. Other processes may only need to occur once in a while; when they are done, the cog’s resources can be freed up for another process.</p>
                <p class="PlainText">Each cog also has two counter modules that can each handle a separate high-speed repetitive process in 32 different operation modes, monitoring or controlling up to two I/O pins each. Once the counter modules are configured, the cog may continue executing code while the counter modules operate simultaneously.</p>
                <p class="PlainText">So, theoretically, the Propeller chip can be running a maximum of 24 simultaneous processes; 16 counter operations and 8 sophisticated, programmatic processes.</p>
                <p class="PlainText">In Propeller Assembly, it is also possible to use the <span class="keyword_in_text">JMPRET</span> instruction to achieve simple multi-tasking in a cog.  This logically adds processes to the system, though they are executed sequentially, rather than in parallel.</p>
            </div>
        </div>
        <p>&#160;</p>
        <div class="MCDropDown">
            <div class="MCDropDownHead_0"><a class="MCDropDownHotSpot_0" href="javascript:void(0);" id="MCDropDownHotSpot_78907024_7" onclick="FMCDropDown( this ); return false;"><img style="border: none;margin-right: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" class="MCDropDownIcon" />If processes share main memory, how are memory collisions prevented?</a>
            </div>
            <div class="MCDropDownBody" id="MCDropDownBody_78907024_7" style="display: none;">
                <p class="PlainText">A memory collision occurs when two or more cogs operate on a block of memory at the same time in a way that causes conflict between them.</p>
                <p class="PlainText">A cog has exclusive access to its own <a href="../HardwareTopics/Cogs.htm#Cog" target="" title="" alt="" MadCap:conditions="PropellerHelpConditionTags.RemoveLink" MadCap:excludeAction="unbind" class="MCXref_0">Cog RAM</a>, so no memory collision between cogs can occur there.  However, all cogs share <a href="../HardwareTopics/MainMem.htm#MainRam" target="" title="" alt="" MadCap:conditions="PropellerHelpConditionTags.RemoveLink" MadCap:excludeAction="unbind" class="MCXref_0">Main RAM</a>; care must be taken to avoid collisions there.</p>
                <p class="PlainText">A cog can read or write a byte, word, or long from Main RAM as an atomic operation—a single operation that no other cog can interfere with.  In contrast, cogs can unknowingly interfere with each other's successive atomic operations (multiple reads or writes of bytes, words, or longs from Main RAM) since their respective operations are naturally interleaved when accessing a mutually-exclusive resource.</p>
                <p class="PlainText">This situation can cause problems if two or more cogs simultaneously perform multiple opposing operations on the same logical block of memory.  For example, two cogs may be tasked to cooperate on data contained in a block of memory 10 bytes in length.  If one cog starts writing to the 10 bytes while another is reading, timing variations in their respective program loops can easily cause the "reading" cog to read a mixture of both new byte-sized data and old byte-sized data.</p>
                <p class="PlainText">To prevent such misreads or miswrites, the cogs must coordinate their efforts through an agreed-upon synchronization mechanism.  This mechanism serves as a "flag" to signal when a cog is performing a non-atomic operation on a mutually-exclusive resource.  All cogs involved with that resource must check and set the "flag" before proceeding, and must clear the flag to indicate when they are done.</p>
                <p class="PlainText">In many situations where memory is involved, a simple solution is to designate a byte, word, or long within the memory block to serve as this synchronization flag, but since that memory-based flag can not be read and written within the same atomic operation (it requires a read operation followed by a write operation) it may not work flawlessly for all situations.  For this reason, a dedicated synchronization mechanism exists, called <a href="../HardwareTopics/Locks.htm" target="" title="" alt="" MadCap:conditions="PropellerHelpConditionTags.RemoveLink" MadCap:excludeAction="unbind" class="MCXref_0">Locks</a>, or semaphores.</p>
                <p class="PlainText">The Propeller has 8 global lock bits which can be read and written simultaneously, as a single operation.  When used properly, the lock bits can facilitate synchronization between cogs for any purpose desired; not just for Main RAM usage.  The lock bits are managed through four commands: <span class="keyword_in_text">LOCKNEW</span>, <span class="keyword_in_text">LOCKSET, LOCKCLR</span>, and <span class="keyword_in_text">LOCKRET</span>.</p>
            </div>
        </div>
        <p>&#160;</p>
        <div class="Col2">
            <div class="MasterFoot">
                <p><a href="../HomeTopics/HomePage.htm">Go to Welcome page</a>
                </p>
                <p>&#160;</p>
                <p>&#160;</p>
            </div>
        </div>
        <div class="Col2">
            <div class="MasterFoot">
                <p style="text-align: right;"><span MadCap:conditions="PropellerHelpConditionTags.PropellerHelp" class="ContactInfoProjectName">Propeller Help</span> <![CDATA[ ]]><span MadCap:conditions="PropellerHelpConditionTags.PropellerHelp" class="ContactInfoVersion#">Version 1.3</span></p>
                <p style="text-align: right;">Copyright ©&#160;<span class="ContactInfoCompanyName">Parallax Inc.</span>, dba <span class="ContactInfodbaName">Parallax Semiconductor</span></p>
                <p style="text-align: right;">
                </p>
                <p style="text-align: right;"><span class="SystemShortDate">7/18/2012</span>
                </p>
                <p style="text-align: right;"><span class="MCPopup"><a href="javascript:void(0);" MadCap:src="../HomeTopics/TermsOfUse.htm" onclick="FMCPopup( event, this ); return false;" class="MCXref_0" alt="" title="" xrefformat="{paratext}" xrefhref="../../HomeTopics/TermsOfUse.htm">Terms of Use</a></span>
                </p>
            </div>
        </div>
        <script type="text/javascript">/* <![CDATA[ */

			var _gaq = _gaq || [];
			_gaq.push(['_setAccount', 'UA-285614-1']);
			_gaq.push(['_trackPageview']);

			(function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
			})();

		/* ]]> */</script>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>